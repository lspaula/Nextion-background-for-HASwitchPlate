/* -------------------------------------- BEGIN USER CONFIG -------------------------------------- */

/* Configuration for the three page selection buttons at the bottom of the page */
val plate01_pagebutton1page = 1 // Set page # for bottom left button
val plate01_pagebutton1txt = 'Lights' // Set page title for bottom left button
val plate01_pagebutton2page = 2 // Set page # for bottom center button
val plate01_pagebutton2txt = 'Climate' // Set page title for bottom left button
val plate01_pagebutton3page = 3 // Set page # for bottom right button
val plate01_pagebutton3txt = 'Scenes' // Set page title for bottom left button

/* Configuration for page 1 (Lights) */
val plate01_page1button4txt = 'Living Top'
val plate01_page1button5txt = 'Living Table'
val plate01_page1button6txt = 'Kitchen Led'
val plate01_page1button7txt = 'Hallway'
val plate01_page1button8txt = 'Bedside'
val plate01_page1button9txt = ''
val plate01_page1button10txt = 'Living Crown'
val plate01_page1button11txt = ''
val plate01_page1button12txt = 'Backlight'
val plate01_page1button13txt = ''
val plate01_page1button4font = 5
val plate01_page1button5font = 5
val plate01_page1button6font = 5
val plate01_page1button7font = 5
val plate01_page1button8font = 5
val plate01_page1button9font = 5
val plate01_page1button10font = 6
val plate01_page1button11font = 6
val plate01_page1button12font = 6
val plate01_page1button13font = 6

/* Configuration for page 2 (Climate) */
val plate01_page2button4txt = 'Living Climate'
val plate01_page2button5txt = ''
val plate01_page2button6txt = KomecoTemp.state.format("%d°C")
val plate01_page2button7txt = ''//Komeco.state.toString
val plate01_page2button8txt = ''
val plate01_page2button9txt = 'Bedroom Climate'
val plate01_page2button10txt = ''
val plate01_page2button11txt = AirmaxTemp.state.format("%d°C")
val plate01_page2button12txt = ''
val plate01_page2button13txt = ''
val plate01_page2button14txt = 'Bathroom Climate'
val plate01_page2button15txt = ''
val plate01_page2button16txt = CadenceTemp.state.format("%d°C")
val plate01_page2button17txt = ''
val plate01_page2button18txt = ''
val plate01_page2button19txt = 'Cool'
val plate01_page2button20txt = 'Heat'
// val plate01_page2button21txt = ''
// val plate01_page2button22txt = ''
// val plate01_page2button23txt = ''
val plate01_page2button4font = 6
val plate01_page2button5font = 5
val plate01_page2button6font = 5
val plate01_page2button7font = 5
val plate01_page2button8font = 5
val plate01_page2button9font = 6
val plate01_page2button10font = 5
val plate01_page2button11font = 5
val plate01_page2button12font = 5
val plate01_page2button13font = 5
val plate01_page2button14font = 6
val plate01_page2button15font = 5
val plate01_page2button16font = 5
val plate01_page2button17font = 5
val plate01_page2button18font = 5
val plate01_page2button19font = 6
val plate01_page2button20font = 6
// val plate01_page2button21font = 6
// val plate01_page2button22font = 6
// val plate01_page2button23font = 6

/* Configuration for page 3 (Scenes) */
val plate01_page3button4txt = 'Living Dim'
val plate01_page3button5txt = 'Living Bright'
val plate01_page3button6txt = 'Lights OFF'
val plate01_page3button7txt = 'Lights Def'
val plate01_page3button8txt = 'Bath mode'
val plate01_page3button9txt = 'Movie Lights'
val plate01_page3button10txt = 'Away Mode'
val plate01_page3button11txt = 'Stay Mode'
val plate01_page3button12txt = 'Home Climate'
val plate01_page3button13txt = 'Both Blankets'
val plate01_page3button14txt = 'TV Set On'
val plate01_page3button15txt = 'TV Set Off'
val plate01_page3button4font = 5
val plate01_page3button5font = 5
val plate01_page3button6font = 5
val plate01_page3button7font = 5
val plate01_page3button8font = 5
val plate01_page3button9font = 5
val plate01_page3button10font = 5
val plate01_page3button11font = 5
val plate01_page3button12font = 5
val plate01_page3button13font = 5
val plate01_page3button14font = 5
val plate01_page3button15font = 5

/* Configuration for page 4 (Page 4) */
val plate01_page4button4txt = 'L1'
val plate01_page4button5txt = 'L2'
val plate01_page4button6txt = 'L3'
val plate01_page4button4font = 1
val plate01_page4button5font = 1
val plate01_page4button6font = 1

/* Configuration for page 5 (Page 5) */
val plate01_page5button4txt = 'P5 B4 Light'
val plate01_page5button5txt = 'P6 B5 Light'
val plate01_page5button6txt = 'P7 B6 Light'
val plate01_page5button4font = 1
val plate01_page5button5font = 1
val plate01_page5button6font = 1


// /* -------------------------------------- END USER CONFIG -------------------------------------- */

// /* -------------------------------------- BEGIN USER-DEFINED HANDLER RULES -------------------------------------- */

// // HASP -> openHAB item handling rules

// /* 
// Use the rules below to add automation logic in your system, based on inputs from the HASP.
// There is an if statement for every button and dimmer on the HASP pages, and you just need to add your setup's items
// to the proper if statement, to use that button to control the item.
// Several examples are included (commented out) to get you started, whether you just want to send an ON command when the 
// button is pressed, or toggle the output item depending on its current state.
// */

rule "Setup Nextion System Variables"
when
    Item HASP_Plate01_Plate_Status changed to "ON" or
    Item HASP_Plate01_Plate_Refresh received command ON
then


   var String jsonString = '["thsp=120", ' +    // Setup Screen Sleep timer = in seconds
                    '"wup=255", ' +     // Sets which page Nextion loads when exiting sleep mode.  When wup=255 it will wake up in the page it went to sleep in
                    '"thup=1", ' +      // Sets if Nextion should auto-wake from sleep when touch press occurs
                    '"usup=0"]'         // Sets if serial data wakes Nextion from sleep mode automatically (when you send any data to screen)

     HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)
end

rule "Handle HASP Master"
when
    Item HASP_Plate01_Plate_State_JSON_Value received update
then
    //parse out data from JSON string (page, button, value)
    var String eventpage = HASP_Plate01_Plate_State_JSON_Event.state.toString.split("\\[").get(1).split("\\]").get(0)
    var String eventbutton = HASP_Plate01_Plate_State_JSON_Event.state.toString.split("\\[").get(2).split("\\]").get(0)

    if (HASP_Plate01_Plate_State_JSON_Value.state == 'OFF')
    {
        //Do nothing (button release event)
        logInfo ("HASP", "Ignoring OFF event")
    }
    else
    {
        //Handle Page/button/dimmer value event
        if(HASP_Plate01_Light_Power.state == OFF)
        {
            HASP_Plate01_Light_Power.sendCommand(ON)
        }
        else
        {   
            if ((eventbutton == '1' || eventbutton == '2' || eventbutton == '3') && eventpage != '0') //Handle the pressing of one of the 3 bottom page buttons
            {
                switch(eventbutton)
                {
                    case '1':
                    {
                        HASP_Plate01_Page.sendCommand(plate01_pagebutton1page as Number)
                    }
                    case '2':
                    {
                        HASP_Plate01_Page.sendCommand(plate01_pagebutton2page as Number)
                    }
                    case '3':
                    {
                        HASP_Plate01_Page.sendCommand(plate01_pagebutton3page as Number)
                    }
                }               
                HASP_Plate01_Light_Power.sendCommand(ON) //refresh backlight timer following button press
            }
            else
            {
                switch(eventpage)
                {
                    case '0': // Page 0
                    {
                        /*
                            Act on buttons from Page 0 here
                        */
                        if (eventbutton == '1')
                            {
                            //Insert action to perform if button 0 was pressed
                    
                            HASP_Plate01_Page.sendCommand(1 as Number)                         //This is only for when the HASP starts in page 0 and you need to go to a different page, this will send it to Page 1
                            }
                    }
                    case '1': // Page 1
                    {
                        /*
                            Act on buttons from Page 1 here
                        */
                        if (eventbutton == '4')
                            {
                            if(TopTVLight.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                TopTVLight.sendCommand(OFF)
                                }
                            else
                                {
                                TopTVLight.sendCommand(ON)
                                }
                            }
                        else if (eventbutton == '5')
                            {
                            if(TableLight.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                TableLight.sendCommand(OFF)
                                }
                            else
                                {
                                TableLight.sendCommand(ON)
                                }
                            }
                        else if (eventbutton == '6')
                            {
                            if(KitchenLedLight.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                KitchenLedLight.sendCommand(OFF)
                                }
                            else
                                {
                                KitchenLedLight.sendCommand(ON)
                                }
                        }
                        else if (eventbutton == '7')
                            {
                            if(HallwayLight.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                HallwayLight.sendCommand(OFF)
                                }
                            else
                                {
                                HallwayLight.sendCommand(ON)
                                }
                            }
                        else if (eventbutton == '8')
                            {
                            if(BedsideLamp.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                BedsideLamp.sendCommand(OFF)
                                }
                            else
                                {
                                BedsideLamp.sendCommand(ON)
                                }
                            }
                        else if (eventbutton == '9')
                            {
                            }
                        else if (eventbutton == '10')
                            {
                            }
                        else if (eventbutton == '11')
                            {
                            //Insert action to perform if dimmer 11 was moved
                            SancaLed.sendCommand(HASP_Plate01_Plate_State_JSON_Value.state.toString)
                            HASP_Plate01_Light_Power.sendCommand(ON) //refresh backlight timer following button press    
                            }
                        else if (eventbutton == '12')
                            {
                            }
                        else if (eventbutton == '13')
                            {
                            //Insert action to perform if dimmer 13 was moved
                            if (HASP_Plate01_Plate_State_JSON_Value.state != 'ON'){
                                HASP_Plate01_Light_Dimmer.sendCommand(HASP_Plate01_Plate_State_JSON_Value.state.toString) //Example - send dimmer value to HASP Backlight item
                                }
                            }
                        HASP_Plate01_Light_Power.sendCommand(ON) //refresh backlight timer following button press    
                    }
                    case '2': // Page 2
                    {
                        // Getting the temperatures and storing it to variables
                        val kTemp = KomecoTemp.state as Number
                        val aTemp = AirmaxTemp.state as Number
                        val cTemp = CadenceTemp.state as Number
                        /*
                            Act on buttons/dimmers from Page 2 here
                        */
                        if (eventbutton == '4')
                            {
                            }
                        else if (eventbutton == '5')
                            {
                            if(kTemp > 16)
                                {
                                KomecoTemp.sendCommand(kTemp - 1)
                                }
                            }
                        else if (eventbutton == '6')
                            {
                                // Nothing to be done here. It is just a display for the value.
                            }
                        else if (eventbutton == '7')
                            {
                            if(Komeco.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                Komeco.sendCommand(OFF)
                                }
                            else
                                {
                                Komeco.sendCommand(ON)
                                }
                            }
                        else if (eventbutton == '8')
                            {
                            if(kTemp < 32)
                                {
                                KomecoTemp.sendCommand(kTemp + 1)
                                }
                            }
                        else if (eventbutton == '9')
                            {
                            }
                        else if (eventbutton == '10')
                            {
                            if(aTemp > 16)
                                {
                                AirmaxTemp.sendCommand(aTemp - 1)
                                }
                            }
                        else if (eventbutton == '11')
                            {
                            }
                        else if (eventbutton == '12')
                            {
                            if(Airmax.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                Airmax.sendCommand(OFF)
                                }
                            else
                                {
                                Airmax.sendCommand(ON)
                                }
                            }
                        else if (eventbutton == '13')
                            {
                            if(aTemp < 32)
                                {
                                AirmaxTemp.sendCommand(aTemp + 1)
                                }
                            }
                        else if (eventbutton == '14')
                            {
                            }
                        else if (eventbutton == '15')
                            {
                            if(cTemp > 30)
                                {
                                CadenceTemp.sendCommand(cTemp - 1)
                                }
                            }
                        else if (eventbutton == '16')
                            {
                            }
                        else if (eventbutton == '17')
                            {
                            if(Cadence.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
                                {
                                Cadence.sendCommand(OFF)
                                }
                            else
                                {
                                Cadence.sendCommand(ON)
                                }
                            }
                        else if (eventbutton == '18')
                            {
                            if(cTemp < 50)
                                {
                                CadenceTemp.sendCommand(cTemp + 1)
                                }
                            }
                        else if (eventbutton == '19')
                            {
                                AirmaxMode.sendCommand("cool")
                                KomecoMode.sendCommand("cool")
                            }
                        else if (eventbutton == '20')
                            {
                                AirmaxMode.sendCommand("heat")
                                KomecoMode.sendCommand("heat")
                            }
                        HASP_Plate01_Light_Power.sendCommand(ON) //refresh backlight timer following button press    
                    }
                    case '3':
                    {
                        /*
                            Act on buttons from Page 3 here
                        */
                        if (eventbutton == '4')
                            {
                                sendCommand(SancaLed, "10")
                            }
                        else if (eventbutton == '5')
                            {
                                sendCommand(SancaLed, "100")
                            }
                        else if (eventbutton == '6')
                            {
                                sendCommand(HallwayLight, OFF)
                                sendCommand(KitchenLedLight, OFF)
                                sendCommand(TopTVLight, OFF)
                                sendCommand(TableLight, OFF)
                                sendCommand(BedsideLamp, OFF)
                                sendCommand(SancaColor, OFF)
                                sendCommand(SancaLed, OFF)
                                sendCommand(BedroomColor, OFF)
                            }
                        else if (eventbutton == '7')
                            {
                                sendCommand(HallwayLight, ON)
                                sendCommand(KitchenLedLight, ON)
                                sendCommand(SancaLed, "10")
                                sendCommand(SancaColor, OFF)
                            }
                        else if (eventbutton == '8')
                            {
                            }
                        else if (eventbutton == '9')
                            {
                                sendCommand(MovieLights, ON)
                            }
                        else if (eventbutton == '10')
                            {
                                sendCommand(AutoMorningClimate, OFF)
                                sendCommand(AutoBedTimeBlanket, OFF)
                                sendCommand(AutoMorningLights, OFF)  
                                sendCommand(AutoNightLights, OFF)  
                                sendCommand(MovementLights, OFF)  
                            }
                        else if (eventbutton == '11')
                            {
                                sendCommand(AutoMorningClimate, ON)
                                sendCommand(AutoBedTimeBlanket, ON)
                                sendCommand(AutoMorningLights, ON)  
                                sendCommand(AutoNightLights, ON)  
                                sendCommand(MovementLights, ON)  
                            }
                        else if (eventbutton == '12')
                            {
                                sendCommand(BothACs, ON)  
                            }
                        else if (eventbutton == '13')
                            {
                                sendCommand(BothBlankets, ON)
                            }
                        else if (eventbutton == '14')
                            {
                                sendCommand(TV, ON)  
                                sendCommand(Receiver, ON)  
                            }
                        else if (eventbutton == '15')
                            {
                                sendCommand(TV, OFF)  
                                sendCommand(Receiver, OFF)  
                            }
                        HASP_Plate01_Light_Power.sendCommand(ON) //refresh backlight timer following button press                    
                    }
                    case '4':
                    {
                        /*
                            Act on buttons from Page 4 here
                        */
                        if (eventbutton == '4')
                        {
                            //Insert action to perform if button 4 was pressed
                        }
                        else if (eventbutton == '5')
                        {
                            //Insert action to perform if button 5 was pressed
                        }
                        else if (eventbutton == '6')
                        {
                            //Insert action to perform if button 6 was pressed
                        }
                        else if (eventbutton == '7')
                        {
                            //Insert action to perform if button 7 was pressed
                        }        
                        HASP_Plate01_Light_Power.sendCommand(ON) //refresh backlight timer following button press
                    }
                    case '5':
                    {
                        /*
                            Act on buttons/dimmers from Page 4 here
                        */
                        if (eventbutton == '4')
                        {
                            //Insert action to perform if button 4 was pressed
                        }
                        else if (eventbutton == '5')
                        {
                            //Insert action to perform if button 5 was pressed
                        }
                        else if (eventbutton == '6')
                        {
                            //Insert action to perform if button 6 was pressed
                        }
                        else if (eventbutton == '7')
                        {
                            //Insert action to perform if dimmer 1 was moved
                        }
                        else if (eventbutton == '8')
                        {
                            //Insert action to perform if dimmer 2 was moved
                        }
                        else if (eventbutton == '9')
                        {
                            //Insert action to perform if dimmer 3 was moved
                        }
                        HASP_Plate01_Light_Power.sendCommand(ON) //refresh backlight timer following button press                    
                    }
                }
            }
        }
    }
end

// // openHAB -> HASP item handling rules

// /* 
// Use the rules below to modify the HASP display based on inputs from your openHAB system.

// A sample rule has been included to show you how to modify a dimmer value on Page 5, to make it match the actual position of the openHAB item
// (in this case, we're simply taking the input from Dimmer 1, which is tied to the HASP Backlight item in the HASP -> openHAB rules above, and 
// sending that value to Dimmer 2)

// You can also use these rules to display status information on one of the screens of the HASP (i.e. weather, system status, clock, etc..)

// Another great use for these rules would be for screen 9, which is built to show 3d printer status from Octoprint.

// */

// rule "Handle HASP Master Page 2 Status"
// when
//     Item localCurrentTemperature received update or
//     Item Temperature_MasterBedroom received update or
//     Item Date received update or
//     Item HASP_Plate01_Page_Current received update 2
// then
//     if (HASP_Plate01_Page_Current.state == 2)   //Only update page if you're on page 2 (avoid sending too many MQTT messages)
//     {
//        //["p[2].b[4].txt=\"O: 27.6 °F\"", "p[2].b[5].txt=\"I: 71.8 °F\"", ...]

//         var String jsonString = '["p[2].b[4].txt=\\"' + 'O: ' + localCurrentTemperature.state.format("%.1f °F") + '\\"", ' +
//                          '"p[2].b[5].txt=\\"' + 'I: ' + Temperature_MasterBedroom.state.format("%.1f °F") + '\\"", ' +
//                          '"p[2].b[6].txt=\\"' + (Date.state as DateTimeType).format("%1$tA") + '\\"", ' +
//                          '"p[2].b[7].txt=\\"' + (Date.state as DateTimeType).format("%1$td.%1$tb.%1$tY") + '\\""]'

//         HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)
//     }
// end

//      ____  _                                   
//     / __ \(_)___ ___  ____ ___  ___  __________
//    / / / / / __ `__ \/ __ `__ \/ _ \/ ___/ ___/
//   / /_/ / / / / / / / / / / / /  __/ /  (__  ) 
//  /_____/_/_/ /_/ /_/_/ /_/ /_/\___/_/  /____/  
//                                                

rule "Handle HASP Master Page 2 dimmers"
when 
    Item SancaLed received update or 
    Item HASP_Plate01_Page_Current received update
then
    var String jsonString = '["p[1].b[11].val=' + SancaLed.state + '"]'
    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)    
end

//     ________    _                 __     
//    / ____/ /   (_)___ ___  ____ _/ /____ 
//   / /   / /   / / __ `__ \/ __ `/ __/ _ \
//  / /___/ /___/ / / / / / / /_/ / /_/  __/
//  \____/_____/_/_/ /_/ /_/\__,_/\__/\___/ 
//                                          

rule "Handle HASP Master Page 2 Komeco status display"
when
    Item Komeco received update or
    Item HASP_Plate01_Page_Current received update
then
    var String jsonString
    if(Komeco.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
        {
        jsonString = '["p[2].b[21].picc=4"]'
        }
    else
        {
        jsonString = '["p[2].b[21].picc=3"]' 
        }
    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)    
end

rule "Handle HASP Master Page 2 Komeco temperature display"
when
    Item KomecoTemp received update
then
    var String jsonString = '["p[2].b[6].txt=\\"' +  KomecoTemp.state.format("%d°C") + '\\""]'
    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)    
end

rule "Handle HASP Master Page 2 Airmax status display"
when
    Item Airmax received update or
    Item HASP_Plate01_Page_Current received update
then
    var String jsonString
    if(Airmax.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
        {
        jsonString = '["p[2].b[22].picc=4"]'
        }
    else
        {
        jsonString = '["p[2].b[22].picc=3"]' 
        }
    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)    
end

rule "Handle HASP Master Page 2 Airmax temperature display"
when
    Item AirmaxTemp received update
then
    var String jsonString = '["p[2].b[11].txt=\\"' +  AirmaxTemp.state.format("%d°C") + '\\""]'
    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)    
end

rule "Handle HASP Master Page 2 Cadence status display"
when
    Item Cadence received update or
    Item HASP_Plate01_Page_Current received update
then
    var String jsonString
    if(Cadence.state == ON)                                    //Example - Toggle - change item state using HASP button (turn OFF if ON and ON if OFF)
        {
        jsonString = '["p[2].b[23].picc=4"]'
        }
    else
        {
        jsonString = '["p[2].b[23].picc=3"]' 
        }
    
    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)    
end

rule "Handle HASP Master Page 2 Cadence temperature display"
when
    Item CadenceTemp received update
then
    var String jsonString = '["p[2].b[16].txt=\\"' +  CadenceTemp.state.format("%d°C") + '\\""]'
    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)    
end






// rule "Handle HASP Master Page 9 chart"
// when
//     Time cron "0 * * ? * *"                     //Fire rule every minute
// then
//     if (HASP_Plate01_Page_Current.state == 9)   //Only update chart if you're on page 9 (chart gets reset when page is not active)
//     {
//         var Number sigStrength = (((HASP_Plate01_Plate_Sensor_SignalStrength.state as DecimalType) + 100 ) * 1.333).intValue
//         logInfo("HASP", sigStrength.toString)

//         HASP_Plate01_Plate_Command.sendCommand('add 6,0,' + sigStrength.toString)
//     }
// end

// /* -------------------------------------- END USER-DEFINED HANDLER RULES -------------------------------------- */

// /* Restore saved page and rebuild config on reconnect */
rule "HASP Master Restore page on connect"
when
    Item HASP_Plate01_Plate_Status changed to "ON" or
    Item HASP_Plate01_Plate_Refresh received command ON
then
  
    HASP_Plate01_Page.sendCommand(HASP_Plate01_Page_Current.state as Number) // Send HASP to previous page

    var String jsonString = '["p[1].b[1].pco=65535", ' +   //Initialize bottom page buttons with gray color
                    '"p[1].b[2].pco=65535", ' +
                    '"p[1].b[3].pco=65535", ' +
                    '"p[2].b[1].pco=65535", ' +
                    '"p[2].b[2].pco=65535", ' +
                    '"p[2].b[3].pco=65535", ' +
                    '"p[3].b[1].pco=65535", ' +
                    '"p[3].b[2].pco=65535", ' +
                    '"p[3].b[3].pco=65535", ' +
                    '"p[4].b[1].pco=65535", ' +
                    '"p[4].b[2].pco=65535", ' +
                    '"p[4].b[3].pco=65535", ' +
                    '"p[5].b[1].pco=65535", ' +
                    '"p[5].b[2].pco=65535", ' +
                    '"p[5].b[3].pco=65535", ' +
                    '"p[1].b[1].txt=\\"' + plate01_pagebutton1txt + '\\"", ' +  //Initialize bottom page button text
                    '"p[1].b[2].txt=\\"' + plate01_pagebutton2txt + '\\"", ' +
                    '"p[1].b[3].txt=\\"' + plate01_pagebutton3txt + '\\"", ' +
                    '"p[2].b[1].txt=\\"' + plate01_pagebutton1txt + '\\"", ' +
                    '"p[2].b[2].txt=\\"' + plate01_pagebutton2txt + '\\"", ' +
                    '"p[2].b[3].txt=\\"' + plate01_pagebutton3txt + '\\"", ' +
                    '"p[3].b[1].txt=\\"' + plate01_pagebutton1txt + '\\"", ' +
                    '"p[3].b[2].txt=\\"' + plate01_pagebutton2txt + '\\"", ' +
                    '"p[3].b[3].txt=\\"' + plate01_pagebutton3txt + '\\"", ' +
                    '"p[4].b[1].txt=\\"' + plate01_pagebutton1txt + '\\"", ' +
                    '"p[4].b[2].txt=\\"' + plate01_pagebutton2txt + '\\"", ' +
                    '"p[4].b[3].txt=\\"' + plate01_pagebutton3txt + '\\"", ' +
                    '"p[5].b[1].txt=\\"' + plate01_pagebutton1txt + '\\"", ' +
                    '"p[5].b[2].txt=\\"' + plate01_pagebutton2txt + '\\"", ' +
                    '"p[5].b[3].txt=\\"' + plate01_pagebutton3txt + '\\""]'                  

    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)

    jsonString = '["p[1].b[4].txt=\\"' + plate01_page1button4txt + '\\"", ' +    // Update button texts for all pages
                     '"p[1].b[5].txt=\\"' + plate01_page1button5txt + '\\"", ' +
                     '"p[1].b[6].txt=\\"' + plate01_page1button6txt + '\\"", ' +
                     '"p[1].b[7].txt=\\"' + plate01_page1button7txt + '\\"", ' +
                     '"p[1].b[8].txt=\\"' + plate01_page1button8txt + '\\"", ' +
                     '"p[1].b[9].txt=\\"' + plate01_page1button9txt + '\\"", ' +
                     '"p[1].b[10].txt=\\"' + plate01_page1button10txt + '\\"", ' +
                     '"p[1].b[11].txt=\\"' + plate01_page1button11txt + '\\"", ' +
                     '"p[1].b[12].txt=\\"' + plate01_page1button12txt + '\\"", ' +
                     '"p[1].b[13].txt=\\"' + plate01_page1button13txt + '\\"", ' +
                     '"p[2].b[4].txt=\\"' + plate01_page2button4txt + '\\"", ' +
                     '"p[2].b[5].txt=\\"' + plate01_page2button5txt + '\\"", ' +
                     '"p[2].b[6].txt=\\"' + plate01_page2button6txt + '\\"", '  +
                     '"p[2].b[7].txt=\\"' + plate01_page2button7txt + '\\"", ' +
                     '"p[2].b[8].txt=\\"' + plate01_page2button8txt + '\\"", ' +
                     '"p[2].b[9].txt=\\"' + plate01_page2button9txt + '\\"", ' +
                     '"p[2].b[10].txt=\\"' + plate01_page2button10txt + '\\"", ' +
                     '"p[2].b[11].txt=\\"' + plate01_page2button11txt  + '\\"", '  +
                     '"p[2].b[12].txt=\\"' + plate01_page2button12txt + '\\"", ' +
                     '"p[2].b[13].txt=\\"' + plate01_page2button13txt + '\\"", ' +
                     '"p[2].b[14].txt=\\"' + plate01_page2button14txt + '\\"", ' +
                     '"p[2].b[15].txt=\\"' + plate01_page2button15txt + '\\"", ' +
                     '"p[2].b[16].txt=\\"' + plate01_page2button16txt  + '\\"", '  +
                     '"p[2].b[17].txt=\\"' + plate01_page2button17txt + '\\"", ' +
                     '"p[2].b[18].txt=\\"' + plate01_page2button18txt + '\\"", ' +
                     '"p[2].b[19].txt=\\"' + plate01_page2button19txt + '\\"", ' +
                     '"p[2].b[20].txt=\\"' + plate01_page2button20txt + '\\"", ' +
                     '"p[3].b[4].txt=\\"' + plate01_page3button4txt + '\\"", ' +
                     '"p[3].b[5].txt=\\"' + plate01_page3button5txt + '\\"", ' +
                     '"p[3].b[6].txt=\\"' + plate01_page3button6txt + '\\"", ' +
                     '"p[3].b[7].txt=\\"' + plate01_page3button7txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[8].txt=\\"' + plate01_page3button8txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[9].txt=\\"' + plate01_page3button9txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[10].txt=\\"' + plate01_page3button10txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[11].txt=\\"' + plate01_page3button11txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[12].txt=\\"' + plate01_page3button12txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[13].txt=\\"' + plate01_page3button13txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[14].txt=\\"' + plate01_page3button14txt + '\\"", ' +                                                                                                                                                   
                     '"p[3].b[15].txt=\\"' + plate01_page3button15txt + '\\""]'

    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)

    jsonString = '["p[1].b[4].font=' + plate01_page1button4font + '", ' +    // Update font sizes for all pages
                     '"p[1].b[5].font=' + plate01_page1button5font + '", ' +
                     '"p[1].b[6].font=' + plate01_page1button6font + '", ' +
                     '"p[1].b[7].font=' + plate01_page1button7font + '", ' +
                     '"p[1].b[8].font=' + plate01_page1button8font + '", ' +
                     '"p[1].b[9].font=' + plate01_page1button9font + '", ' +
                     '"p[1].b[10].font=' + plate01_page1button10font + '", ' +
                     '"p[1].b[11].font=' + plate01_page1button11font + '", ' +
                     '"p[1].b[12].font=' + plate01_page1button12font + '", ' +
                     '"p[1].b[13].font=' + plate01_page1button13font + '", ' +
                     '"p[2].b[4].font=' + plate01_page2button4font + '", ' +
                     '"p[2].b[5].font=' + plate01_page2button5font + '", ' +
                     '"p[2].b[6].font=' + plate01_page2button6font + '", ' +
                     '"p[2].b[7].font=' + plate01_page2button7font + '", ' +
                     '"p[2].b[8].font=' + plate01_page2button8font + '", ' +
                     '"p[2].b[9].font=' + plate01_page2button9font + '", ' +
                     '"p[2].b[10].font=' + plate01_page2button10font + '", ' +
                     '"p[2].b[11].font=' + plate01_page2button11font + '", ' +
                     '"p[2].b[12].font=' + plate01_page2button12font + '", ' +
                     '"p[2].b[13].font=' + plate01_page2button13font + '", ' +
                     '"p[2].b[14].font=' + plate01_page2button14font + '", ' +
                     '"p[2].b[15].font=' + plate01_page2button15font + '", ' +
                     '"p[2].b[16].font=' + plate01_page2button16font + '", ' +
                     '"p[2].b[17].font=' + plate01_page2button17font + '", ' +
                     '"p[2].b[18].font=' + plate01_page2button18font + '", ' +
                     '"p[2].b[19].font=' + plate01_page2button19font + '", ' +
                     '"p[2].b[20].font=' + plate01_page2button20font + '", ' +
                     '"p[3].b[4].font=' + plate01_page3button4font + '", ' +
                     '"p[3].b[5].font=' + plate01_page3button5font + '", ' +
                     '"p[3].b[6].font=' + plate01_page3button6font + '", ' +
                     '"p[3].b[7].font=' + plate01_page3button7font + '", ' +                                                                                                                                                   
                     '"p[3].b[8].font=' + plate01_page3button8font + '", ' +                                                                                                                                                   
                     '"p[3].b[9].font=' + plate01_page3button9font + '", ' +                                                                                                                                                   
                     '"p[3].b[10].font=' + plate01_page3button10font + '", ' +                                                                                                                                                   
                     '"p[3].b[11].font=' + plate01_page3button11font + '", ' +                                                                                                                                                   
                     '"p[3].b[12].font=' + plate01_page3button12font + '", ' +                                                                                                                                                   
                     '"p[3].b[13].font=' + plate01_page3button13font + '", ' +                                                                                                                                                   
                     '"p[3].b[14].font=' + plate01_page3button14font + '", ' +                                                                                                                                                   
                     '"p[3].b[15].font=' + plate01_page3button15font + '"]'

    HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)
   
end

// /* Set page button colors based on current page */
rule "HASP Master set page button colors on page change"
when
    Item HASP_Plate01_Page_Current received update 
then
    if (HASP_Plate01_Page_Current.state != 0)
    {
        var String jsonString = '["p['+ (HASP_Plate01_Page_Current.state.toString) + '].b[1].picc=0", ' +
                            '"p['+ (HASP_Plate01_Page_Current.state.toString) + '].b[2].picc=0", ' +
                            '"p['+ (HASP_Plate01_Page_Current.state.toString) + '].b[3].picc=0"'

        if (HASP_Plate01_Page_Current.state == plate01_pagebutton1page)
        {
                jsonString = jsonString + ', "p['+ (HASP_Plate01_Page_Current.state.toString) + '].b[1].picc=2"]'
        }
        else if (HASP_Plate01_Page_Current.state == plate01_pagebutton2page)
        {
                jsonString = jsonString + ', "p['+ (HASP_Plate01_Page_Current.state.toString) + '].b[2].picc=2"]'
        }
        else if (HASP_Plate01_Page_Current.state == plate01_pagebutton3page)
        {
                jsonString = jsonString + ', "p['+ (HASP_Plate01_Page_Current.state.toString) + '].b[3].picc=2"]'
        }
        else 
        {
                jsonString = jsonString + ']'
        }

        HASP_Plate01_Plate_Command_JSON.sendCommand(jsonString)
    }
end